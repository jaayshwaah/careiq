export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextRequest, NextResponse } from "next/server";
import { rateLimit, RATE_LIMITS } from "@/lib/rateLimiter";
import puppeteer from 'puppeteer-core';
import chromium from '@sparticuz/chromium';

export async function POST(req: NextRequest) {
  try {
    // Apply rate limiting
    const rateLimitResponse = await rateLimit(req, RATE_LIMITS.PDF_EXPORT);
    if (rateLimitResponse) {
      return rateLimitResponse;
    }

    const { title = "CareIQ Chat Export", messages = [] } = await req.json();

    // Create HTML content that can be printed as PDF
    let messagesHtml = '';
    
    for (const message of messages) {
      const role = message.role || 'user';
      const roleLabel = role === 'user' ? 'You' : role === 'assistant' ? 'CareIQ' : 'System';
      const roleClass = role.toLowerCase();
      
      messagesHtml += `
        <div class="message ${roleClass}">
          <div class="message-role">${roleLabel}:</div>
          <div class="message-content">${(message.content || '').replace(/\n/g, '<br>')}</div>
        </div>
      `;
    }

    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>${title}</title>
    <style>
        @page { 
            size: A4; 
            margin: 1in; 
        }
        body { 
            font-family: Arial, sans-serif; 
            font-size: 12px; 
            line-height: 1.4; 
            margin: 0; 
            padding: 0;
            color: #333;
        }
        .header { 
            font-size: 18px; 
            font-weight: bold; 
            margin-bottom: 10px; 
            color: #1E40AF;
        }
        .export-date {
            font-size: 9px;
            color: #666;
            margin-bottom: 20px;
        }
        .message {
            margin-bottom: 15px;
            padding: 12px;
            border-left: 3px solid #3B82F6;
            background: #F8FAFC;
            break-inside: avoid;
        }
        .message-role {
            font-weight: bold;
            color: #1E40AF;
            margin-bottom: 5px;
            font-size: 11px;
        }
        .message-content {
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .user { 
            border-left-color: #10B981; 
            background: #F0FDF4;
        }
        .user .message-role {
            color: #059669;
        }
        .assistant { 
            border-left-color: #3B82F6; 
            background: #F8FAFC;
        }
        .assistant .message-role {
            color: #1E40AF;
        }
        .system { 
            border-left-color: #F59E0B; 
            background: #FFFBEB;
        }
        .system .message-role {
            color: #D97706;
        }
        
        /* Print-specific styles */
        @media print {
            .message {
                page-break-inside: avoid;
            }
            body {
                font-size: 11px;
            }
        }
    </style>
</head>
<body>
    <div class="header">${title}</div>
    <div class="export-date">Exported: ${new Date().toLocaleString()}</div>
    
    ${messagesHtml}
    
    <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #E5E7EB; font-size: 10px; color: #6B7280;">
        Generated by CareIQ • ${messages.length} message${messages.length !== 1 ? 's' : ''} • ${new Date().toLocaleDateString()}
    </div>
</body>
</html>`;

    // Generate PDF using Puppeteer with Chromium for serverless
    const browser = await puppeteer.launch({
      args: [
        ...chromium.args,
        '--hide-scrollbars',
        '--disable-web-security',
      ],
      defaultViewport: chromium.defaultViewport,
      executablePath: await chromium.executablePath(),
      headless: chromium.headless,
      ignoreHTTPSErrors: true,
    });

    try {
      const page = await browser.newPage();
      await page.setContent(htmlContent, { 
        waitUntil: 'networkidle0',
        timeout: 30000 
      });

      const pdfBuffer = await page.pdf({
        format: 'A4',
        margin: {
          top: '1in',
          right: '1in',
          bottom: '1in',
          left: '1in'
        },
        printBackground: true
      });

      await browser.close();

      console.log("Chat export PDF generated successfully, buffer size:", pdfBuffer.length);

      return new NextResponse(pdfBuffer, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="${title.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf"`,
        },
      });

    } catch (pdfError) {
      await browser.close();
      throw pdfError;
    }

  } catch (error: any) {
    console.error("Export error:", error);
    return NextResponse.json({ 
      ok: false, 
      error: error.message || "Failed to export chat" 
    }, { status: 500 });
  }
}